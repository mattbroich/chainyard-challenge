{"version":3,"sources":["publishService.js","SingleBlock.js","TransactionBlock.js","LatestBlock.js","App.js","serviceWorker.js","index.js"],"names":["subject","Subject","publishService","message","next","text","asObservable","SingleBlock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","single","hash","ver","prev_block","mrkl_root","time","bits","nonce","n_tx","size","block_index","main_chain","height","received_time","relayed_by","_this2","subscription","subscribe","topic","fetch","concat","encodeURIComponent","data","then","result","json","setState","console","log","tx","react_default","a","createElement","className","id","Component","TransactionBlock","trans","vin_sz","vout_sz","lock_time","block_height","LatestBlock","block","txIndexes","App","clasSsName","LatestBlock_LatestBlock","SingleBlock_SingleBlock","TransactionBlock_TransactionBlock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cda2081a.chunk.js","sourcesContent":["import { Subject } from 'rxjs';\r\n\r\nconst subject = new Subject();\r\n\r\nexport const publishService = {\r\n  sendMessage: message => subject.next({text: message}),\r\n  getMessage: () => subject.asObservable()\r\n};\r\n","import React, { Component } from 'react';\r\nimport { publishService } from './publishService.js';\r\n\r\nexport default class SingleBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      single: {\r\n        hash: \"\",\r\n        ver: \"\",\r\n        prev_block: \"\",\r\n        mrkl_root: \"\",\r\n        time: \"\",\r\n        bits: \"\",\r\n        nonce: \"\",\r\n        n_tx: [],\r\n        size: \"\",\r\n        block_index: \"\",\r\n        main_chain: \"\",\r\n        height: \"\",\r\n        received_time: \"\",\r\n        relayed_by: \"\"\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.subscription = publishService.getMessage().subscribe(message => {\r\n      if (message.text.topic === \"Latest\") {\r\n        fetch(`/singleblock/${encodeURIComponent(message.text.data)}`)\r\n          .then(result => {\r\n            return result.json();\r\n          }).then(data => {\r\n            this.setState({single: data});\r\n            console.log(data);\r\n            publishService.sendMessage({\"topic\": \"Transaction\", \"data\": data.tx[0].hash});\r\n          })\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"single-block-container\">\r\n        <div id=\"single-block-hash\"><strong>Block Hash:</strong> {this.state.single.hash}</div>\r\n        <div id=\"single-block-ver\"><strong>Block Version:</strong> {this.state.single.ver}</div>\r\n        <div id=\"single-block-prev\"><strong>Previous Block:</strong> {this.state.single.prev_block}</div>\r\n        <div id=\"single-block-mrkl\"><strong>Block MRKL_ROOT:</strong> {this.state.single.mrkl_root}</div>\r\n        <div id=\"single-block-time\"><strong>Block Time:</strong> {this.state.single.time}</div>\r\n        <div id=\"single-block-bits\"><strong>Block Bits:</strong> {this.state.single.bits}</div>\r\n        <div id=\"single-block-nonce\"><strong>Block Nonce:</strong> {this.state.single.nonce}</div>\r\n        <div id=\"single-block-ntx\"><strong>Block N_TX:</strong> {this.state.single.n_tx}</div>\r\n        <div id=\"single-block-size\"><strong>Block Size:</strong> {this.state.single.size}</div>\r\n        <div id=\"single-block-index\"><strong>Block Index:</strong> {this.state.single.block_index}</div>\r\n        <div id=\"single-block-main\"><strong>Block Main Chain:</strong> {this.state.single.main_chain}</div>\r\n        <div id=\"single-block-height\"><strong>Block Height:</strong> {this.state.single.height}</div>\r\n        <div id=\"single-block-rec\"><strong>Block Received Time:</strong> {this.state.single.received_time}</div>\r\n        <div id=\"single-block-relayed\"><strong>Block Relayed By:</strong> {this.state.single.relayed_by}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { publishService } from './publishService.js';\r\n\r\nexport default class TransactionBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      trans: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.subscription = publishService.getMessage().subscribe(message => {\r\n      if (message.text.topic === \"Transaction\") {\r\n        fetch(`/transblock/${encodeURIComponent(message.text.data)}`)\r\n        .then(result => {\r\n          return result.json();\r\n        }).then(data => {\r\n          console.log(\"Trans block called\");\r\n          this.setState({trans: data});\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"trans-container\">\r\n          <div id=\"trans-block-hash\"><strong>Block Hash:</strong> {this.state.trans.hash}</div>\r\n          <div id=\"trans-block-vers\"><strong>Block Version:</strong> {this.state.trans.ver}</div>\r\n          <div id=\"trans-block-vin\"><strong>Block VIN_SZ:</strong> {this.state.trans.vin_sz}</div>\r\n          <div id=\"trans-block-vout\"><strong>Block VOUT_ST:</strong> {this.state.trans.vout_sz}</div>\r\n          <div id=\"trans-block-lock\"><strong>Block Lock Time:</strong> {this.state.trans.lock_time}</div>\r\n          <div id=\"trans-block-size\"><strong>Block Size:</strong> {this.state.trans.size}</div>\r\n          <div id=\"trans-block-relayed\"><strong>Block Relayed By:</strong> {this.state.trans.relayed_by}</div>\r\n          <div id=\"trans-block-height\"><strong>Block Height:</strong> {this.state.trans.block_height}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Subject } from 'rxjs';\r\nimport { publishService } from './publishService.js';\r\n\r\nexport default class LatestBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      block: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n     fetch('/latestblock')\r\n    .then(result => {\r\n      return result.json();\r\n    })\r\n    .then(data => {\r\n      console.log(\"Latest block called\");\r\n      this.setState({block: data});\r\n      publishService.sendMessage({\"topic\": \"Latest\", \"data\": data.hash})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"latest-block-container\">\r\n        <div id=\"latest-block-hash\"><strong>Block Hash:</strong> {this.state.block.hash}</div>\r\n        <div id=\"latest-block-time\"><strong>Block Time:</strong> {this.state.block.time}</div>\r\n        <div id=\"latest-block-index\"><strong>Block Index:</strong> {this.state.block.block_index}</div>\r\n        <div id=\"latest-block-height\"><strong>Block Height:</strong> {this.state.block.height}</div>\r\n        <div className=\"overflow-auto\" id=\"latest-block-txIndexes\"><strong>Block txIndexes:</strong> {this.state.block.txIndexes}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SingleBlock from './SingleBlock.js';\nimport TransactionBlock from './TransactionBlock.js';\nimport LatestBlock from './LatestBlock.js';\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"App\">\n        <div className=\"jumbotron text-center\">\n            <div className=\"container\">\n                <h1 className=\"display-2\">Block Chain Viewer</h1>\n                <p className=\"lead\">This process obtains a Single Block from Block Chain, once the latest block is fetched, then it fires off a request to obtain the details of the latest block. Finally, we grab the first transaction block from the latest block to obtain transaction status.</p>\n            </div>\n        </div>\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <h2 className=\"text-center\">View Latest Block</h2>\n                    <div className=\"card border-lightgray\">\n                        <div clasSsName=\"card-body\">\n                            <small><LatestBlock className=\"block-inner\"></LatestBlock></small>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                    <h2 className=\"text-center\">View Single Block</h2>\n                    <div className=\"card border-lightgray\">\n                        <div className=\"card-body\">\n                            <small><SingleBlock className=\"block-inner\"></SingleBlock></small>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                    <h2 className=\"text-center\">View Transaction Block</h2>\n                    <div className=\"card border-lightgray\">\n                        <div className=\"card-body\">\n                            <small><TransactionBlock className=\"block-inner\"></TransactionBlock></small>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}